buildscript {
    ext.bouncycastleVersion = '1.60'
    ext.jacksonVersion = '2.9.7'
    ext.jnr_unixsocketVersion = '0.15'
    ext.okhttpVersion = '3.8.1'
    ext.rxjavaVersion = '1.2.4'
    ext.slf4jVersion = '1.7.25'
    ext.javaWebSocketVersion = '1.3.8'

    // test dependencies
    ext.equalsverifierVersion = '2.1.7'
    ext.junitVersion = '4.11'
    ext.junitBenchmarkVersion = '0.7.2'
    ext.logbackVersion = '1.2.3'
    ext.mockitoVersion = '1.10.19'
    ext.hamcrestVersion = '1.3'
    ext.testcontainersVersion = '1.10.5'
    ext.awaitility = '3.1.5'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id 'org.unbroken-dome.test-sets' version '1.4.2'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'jacoco'

description 'neow3j Project'

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    //apply plugin: 'checkstyle'

    group 'io.neow3j'
    version '2.3.0'
    archivesBaseName = "${it.name}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('snapshot')) {
        version = version + '-SNAPSHOT'
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
    }

    // We don't want any compiler warnings
    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jacoco {
        toolVersion = '0.8.4' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

//    checkstyle {
//        toolVersion = "7.7"
//        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
//    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.unbroken-dome.test-sets'

    testSets {
        integrationTest { dirName = 'test-integration' }
    }

    dependencies {
        testCompile "junit:junit:$junitVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.hamcrest:hamcrest-all:$hamcrestVersion",
                "org.testcontainers:testcontainers:$testcontainersVersion"
    }
}

configure(subprojects.findAll()) {
    
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives sourcesJar, javadocJar, testJar
    }

    ext {
        nexusUsername = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : ''
        nexusPassword = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : ''
    }

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = project.hasProperty('snapshot') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {

                artifactId "${project.name}"

                from components.java

                artifact sourcesJar {
                    classifier = 'sources'
                }

                artifact javadocJar {
                    classifier = 'javadoc'
                }

                artifact testJar {
                    classifier = 'tests'
                }

                pom {
                    name = 'Neow3j'
                    packaging 'jar'
                    description = project.description
                    url = 'https://github.com/neow3j'

                    scm {
                        url = 'https://github.com/neow3j/neow3j'
                        connection = 'scm:https://github.com/neow3j/neow3j.git'
                        developerConnection = 'scm:https://github.com/neow3j/neow3j.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'gsmachado'
                            name = 'Guilherme Sperb Machado'
                            email = 'guil@axlabs.com'
                        }
                        developer {
                            id = 'claudemiller'
                            name = 'Claude MÃ¼ller'
                            email = 'claude@axlabs.com'
                        }
                    }
                }

                // The code below was based on:
                // https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b
                
                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        println it.file
                        def matcher = it.file =~ /-(sources|javadoc|tests)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }

    signing {
        required { gradle.taskGraph.hasTask('publish') }  // only execute as part of this task
        sign configurations.archives
    }

    task release {
        dependsOn 'build'
        dependsOn 'publish'
        
        tasks.findByName('publish').mustRunAfter 'build'
    }
}

task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        xml.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}